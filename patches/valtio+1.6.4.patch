diff --git a/node_modules/valtio/esm/index.js b/node_modules/valtio/esm/index.js
index 6e4ea3b..96dff69 100644
--- a/node_modules/valtio/esm/index.js
+++ b/node_modules/valtio/esm/index.js
@@ -49,7 +49,7 @@ function useSnapshot(proxyObject, options) {
     lastSnapshot.current = currSnapshot;
     lastAffected.current = currAffected;
   });
-  if ((import.meta.env && import.meta.env.MODE) !== "production") {
+  if (process.env.NODE_ENV!=="production") {
     useAffectedDebugValue(currSnapshot, currAffected);
   }
   const proxyCache = useMemo(() => /* @__PURE__ */ new WeakMap(), []);
diff --git a/node_modules/valtio/esm/index.mjs b/node_modules/valtio/esm/index.mjs
index 6e4ea3b..96dff69 100644
--- a/node_modules/valtio/esm/index.mjs
+++ b/node_modules/valtio/esm/index.mjs
@@ -49,7 +49,7 @@ function useSnapshot(proxyObject, options) {
     lastSnapshot.current = currSnapshot;
     lastAffected.current = currAffected;
   });
-  if ((import.meta.env && import.meta.env.MODE) !== "production") {
+  if (process.env.NODE_ENV!=="production") {
     useAffectedDebugValue(currSnapshot, currAffected);
   }
   const proxyCache = useMemo(() => /* @__PURE__ */ new WeakMap(), []);
diff --git a/node_modules/valtio/esm/utils.js b/node_modules/valtio/esm/utils.js
index 91bf63d..7de0723 100644
--- a/node_modules/valtio/esm/utils.js
+++ b/node_modules/valtio/esm/utils.js
@@ -77,11 +77,11 @@ function devtools(proxyObject, options) {
   const { enabled, name = "" } = options || {};
   let extension;
   try {
-    extension = (enabled != null ? enabled : (import.meta.env && import.meta.env.MODE) !== "production") && window.__REDUX_DEVTOOLS_EXTENSION__;
+    extension = (enabled != null ? enabled : process.env.NODE_ENV!=="production") && window.__REDUX_DEVTOOLS_EXTENSION__;
   } catch {
   }
   if (!extension) {
-    if ((import.meta.env && import.meta.env.MODE) !== "production" && enabled) {
+    if (process.env.NODE_ENV!=="production" && enabled) {
       console.warn("[Warning] Please install/enable Redux devtools extension");
     }
     return;
diff --git a/node_modules/valtio/esm/utils.mjs b/node_modules/valtio/esm/utils.mjs
index 91bf63d..7de0723 100644
--- a/node_modules/valtio/esm/utils.mjs
+++ b/node_modules/valtio/esm/utils.mjs
@@ -77,11 +77,11 @@ function devtools(proxyObject, options) {
   const { enabled, name = "" } = options || {};
   let extension;
   try {
-    extension = (enabled != null ? enabled : (import.meta.env && import.meta.env.MODE) !== "production") && window.__REDUX_DEVTOOLS_EXTENSION__;
+    extension = (enabled != null ? enabled : process.env.NODE_ENV!=="production") && window.__REDUX_DEVTOOLS_EXTENSION__;
   } catch {
   }
   if (!extension) {
-    if ((import.meta.env && import.meta.env.MODE) !== "production" && enabled) {
+    if (process.env.NODE_ENV!=="production" && enabled) {
       console.warn("[Warning] Please install/enable Redux devtools extension");
     }
     return;
diff --git a/node_modules/valtio/esm/vanilla.js b/node_modules/valtio/esm/vanilla.js
index 9a38d06..d24f73e 100644
--- a/node_modules/valtio/esm/vanilla.js
+++ b/node_modules/valtio/esm/vanilla.js
@@ -1,11 +1,11 @@
 import { getUntracked, markToTrack } from 'proxy-compare';
 
-const VERSION = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("VERSION") : Symbol();
-const LISTENERS = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("LISTENERS") : Symbol();
-const SNAPSHOT = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("SNAPSHOT") : Symbol();
-const HANDLER = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("HANDLER") : Symbol();
-const PROMISE_RESULT = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("PROMISE_RESULT") : Symbol();
-const PROMISE_ERROR = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("PROMISE_ERROR") : Symbol();
+const VERSION = process.env.NODE_ENV!=="production" ? Symbol("VERSION") : Symbol();
+const LISTENERS = process.env.NODE_ENV!=="production" ? Symbol("LISTENERS") : Symbol();
+const SNAPSHOT = process.env.NODE_ENV!=="production" ? Symbol("SNAPSHOT") : Symbol();
+const HANDLER = process.env.NODE_ENV!=="production" ? Symbol("HANDLER") : Symbol();
+const PROMISE_RESULT = process.env.NODE_ENV!=="production" ? Symbol("PROMISE_RESULT") : Symbol();
+const PROMISE_ERROR = process.env.NODE_ENV!=="production" ? Symbol("PROMISE_ERROR") : Symbol();
 const refSet = /* @__PURE__ */ new WeakSet();
 function ref(o) {
   refSet.add(o);
@@ -175,7 +175,7 @@ function getVersion(proxyObject) {
   return isObject(proxyObject) ? proxyObject[VERSION] : void 0;
 }
 function subscribe(proxyObject, callback, notifyInSync) {
-  if ((import.meta.env && import.meta.env.MODE) !== "production" && !(proxyObject == null ? void 0 : proxyObject[LISTENERS])) {
+  if (process.env.NODE_ENV!=="production" && !(proxyObject == null ? void 0 : proxyObject[LISTENERS])) {
     console.warn("Please use proxy object");
   }
   let promise;
@@ -199,13 +199,13 @@ function subscribe(proxyObject, callback, notifyInSync) {
   };
 }
 function snapshot(proxyObject) {
-  if ((import.meta.env && import.meta.env.MODE) !== "production" && !(proxyObject == null ? void 0 : proxyObject[SNAPSHOT])) {
+  if (process.env.NODE_ENV!=="production" && !(proxyObject == null ? void 0 : proxyObject[SNAPSHOT])) {
     console.warn("Please use proxy object");
   }
   return proxyObject[SNAPSHOT];
 }
 function getHandler(proxyObject) {
-  if ((import.meta.env && import.meta.env.MODE) !== "production" && !(proxyObject == null ? void 0 : proxyObject[HANDLER])) {
+  if (process.env.NODE_ENV!=="production" && !(proxyObject == null ? void 0 : proxyObject[HANDLER])) {
     console.warn("Please use proxy object");
   }
   return proxyObject[HANDLER];
diff --git a/node_modules/valtio/esm/vanilla.mjs b/node_modules/valtio/esm/vanilla.mjs
index 9a38d06..d24f73e 100644
--- a/node_modules/valtio/esm/vanilla.mjs
+++ b/node_modules/valtio/esm/vanilla.mjs
@@ -1,11 +1,11 @@
 import { getUntracked, markToTrack } from 'proxy-compare';
 
-const VERSION = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("VERSION") : Symbol();
-const LISTENERS = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("LISTENERS") : Symbol();
-const SNAPSHOT = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("SNAPSHOT") : Symbol();
-const HANDLER = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("HANDLER") : Symbol();
-const PROMISE_RESULT = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("PROMISE_RESULT") : Symbol();
-const PROMISE_ERROR = (import.meta.env && import.meta.env.MODE) !== "production" ? Symbol("PROMISE_ERROR") : Symbol();
+const VERSION = process.env.NODE_ENV!=="production" ? Symbol("VERSION") : Symbol();
+const LISTENERS = process.env.NODE_ENV!=="production" ? Symbol("LISTENERS") : Symbol();
+const SNAPSHOT = process.env.NODE_ENV!=="production" ? Symbol("SNAPSHOT") : Symbol();
+const HANDLER = process.env.NODE_ENV!=="production" ? Symbol("HANDLER") : Symbol();
+const PROMISE_RESULT = process.env.NODE_ENV!=="production" ? Symbol("PROMISE_RESULT") : Symbol();
+const PROMISE_ERROR = process.env.NODE_ENV!=="production" ? Symbol("PROMISE_ERROR") : Symbol();
 const refSet = /* @__PURE__ */ new WeakSet();
 function ref(o) {
   refSet.add(o);
@@ -175,7 +175,7 @@ function getVersion(proxyObject) {
   return isObject(proxyObject) ? proxyObject[VERSION] : void 0;
 }
 function subscribe(proxyObject, callback, notifyInSync) {
-  if ((import.meta.env && import.meta.env.MODE) !== "production" && !(proxyObject == null ? void 0 : proxyObject[LISTENERS])) {
+  if (process.env.NODE_ENV!=="production" && !(proxyObject == null ? void 0 : proxyObject[LISTENERS])) {
     console.warn("Please use proxy object");
   }
   let promise;
@@ -199,13 +199,13 @@ function subscribe(proxyObject, callback, notifyInSync) {
   };
 }
 function snapshot(proxyObject) {
-  if ((import.meta.env && import.meta.env.MODE) !== "production" && !(proxyObject == null ? void 0 : proxyObject[SNAPSHOT])) {
+  if (process.env.NODE_ENV!=="production" && !(proxyObject == null ? void 0 : proxyObject[SNAPSHOT])) {
     console.warn("Please use proxy object");
   }
   return proxyObject[SNAPSHOT];
 }
 function getHandler(proxyObject) {
-  if ((import.meta.env && import.meta.env.MODE) !== "production" && !(proxyObject == null ? void 0 : proxyObject[HANDLER])) {
+  if (process.env.NODE_ENV!=="production" && !(proxyObject == null ? void 0 : proxyObject[HANDLER])) {
     console.warn("Please use proxy object");
   }
   return proxyObject[HANDLER];
